# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more: 
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    -  '*'
  paths:
    include:
    - 'src/*'
    - 'test/*'

name: Release-$(Year:yy)-$(DayOfYear)-$(Rev:r)

parameters:
  - name: deployToDev
    displayName: Deploy to dev
    default: false
    type: boolean

variables:
  buildConfiguration: 'Release'
  solution: '**/Cps.Fct.Djb.TransferToolApi.sln'
  project: '**/src/Cps.Fct.Djb.TransferToolApi/Cps.Fct.Djb.TransferToolApi.csproj'
  testProject: '**/test/**/*Tests.csproj'
####### Uncomment and complete when integration tests available #######
  # integrationTestProject: ''
  buildArtifact: 'transfer-tool-api'
  appName: 'Cps.Fct.Djb.TransferToolApi'
  resourceName: 'fa-djb-transfer-tool'
  buildAgentPool: 'DJB PreProd Pool'
  buildAgentPoolProduction: 'DJB Production Pool'
 
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NuGetToolInstaller@1
      name: 'NuGetToolInstaller'
      displayName: 'NuGet tool installer'
    
    - task: NuGetCommand@2
      name: 'NuGetRestore'
      displayName: 'NuGet restore packages'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: Building solution
      inputs:
        command: 'build'
        projects: '$(project)'
        arguments: '--configuration debug'

    - task: DotNetCoreCLI@2
      displayName: Run tests
      inputs:
        command: test
        projects: '$(testProject)'
        arguments: '--configuration debug'

####### Uncomment when integration tests available #######
    # - task: DotNetCoreCLI@2
    #   displayName: Run integration tests
    #   inputs:
    #     command: test
    #     projects: '$(integrationTestProject)'
    #     arguments: '--configuration debug'
    
    - task: DotNetCoreCLI@2
      name: 'Publish'
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(project)'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/Output'
        zipAfterPublish: false
    
    - task: PublishBuildArtifacts@1
      name: 'PublishBuildArtifacts'
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(buildArtifact)'
        publishLocation: 'Container'

- stage: Dev
  displayName: Deploy Dev
  dependsOn: Build
  condition: and(succeeded(), or(eq(${{ parameters.deployToDev }}, 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
  jobs:
    - deployment: Deploy
      displayName: Deploy
      environment: 'DJB-Dev'
      pool:
        name: $(buildAgentPool)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureFunctionApp@1
              inputs:
                azureSubscription: 'sc-djb-preprod'
                resourceGroupName: 'rg-djb-dev'
                appType: 'functionAppLinux'
                appName: '$(resourceName)-dev'
                package: '$(Pipeline.Workspace)/$(buildArtifact)/Output/$(appName)'
                deploymentMethod: runFromPackage
                ConfigurationSettings: '-ApplicationName "$(appName)" ' 
                appSettings:
                  -Application__AppName "DJB Tranfer Tool API"
                  -Application__AppVersion "1.0.0"
                  -Environment "dev"
                  -WEBSITE_ENABLE_SYNC_UPDATE_SITE "true"
                  -WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED "1"
                  -WEBSITES_ENABLE_APP_SERVICE_STORAGE "true"
                  -FUNCTIONS_EXTENSION_VERSION "4"
                  -FUNCTIONS_WORKER_RUNTIME "dotnet-isolated"

####### Uncomment when environments become available #######                    
# - stage: Staging
#   displayName: Deploy Staging
#   dependsOn: Dev
#   condition: and(succeeded('Dev'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
#   jobs:
#     - deployment: Deploy
#       environment: 'DJB-Staging'
#       displayName: Deploy
#       pool:
#         name: $(buildAgentPool)
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#             - task: AzureFunctionApp@1
#               inputs:
#                 azureSubscription: 'DJB PreProd (via service principal)'
#                 resourceGroupName: 'rg-djb-staging'
#                 appType: 'functionAppLinux'
#                 appName: '$(resourceName)-staging'
#                 package: '$(Pipeline.Workspace)/$(buildArtifact)/Output/$(appName)'
#                 deploymentMethod: runFromPackage
#                 ConfigurationSettings: '-ApplicationName "$(appName)" ' 
#                 appSettings:
#                       -Application__AppName "DJB Tranfer Tool API"
#                       -Application__AppVersion "1.0.0"
#                       -Environment "staging"
#                       -WEBSITE_ENABLE_SYNC_UPDATE_SITE "true"
#                       -WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED "1"
#                       -WEBSITES_ENABLE_APP_SERVICE_STORAGE "true"
#                       -FUNCTIONS_EXTENSION_VERSION "4"
#                       -FUNCTIONS_WORKER_RUNTIME "dotnet-isolated"

# - stage: Production
#   displayName: Deploy Production
#   dependsOn: Staging
#   condition: and(succeeded('Staging'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
#   jobs:
#     - deployment: Deploy
#       environment: 'DJB-Prod'
#       displayName: Deploy
#       pool:
#         name: $(buildAgentPoolProduction)
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#             - task: AzureFunctionApp@1
#               inputs:
#                 azureSubscription: 'DJB Prod (via service principal)'
#                 resourceGroupName: 'rg-djb-prod'
#                 appType: 'functionAppLinux'
#                 appName: '$(resourceName)-prod'
#                 package: '$(Pipeline.Workspace)/$(buildArtifact)/Output/$(appName)'
#                 deploymentMethod: runFromPackage
#                 ConfigurationSettings: '-ApplicationName "$(appName)" ' 
#                 appSettings:
#                       -Application__AppName "DJB Tranfer Tool API"
#                       -Application__AppVersion "1.0.0"
#                       -Environment "production"
#                       -WEBSITE_ENABLE_SYNC_UPDATE_SITE "true"
#                       -WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED "1"
#                       -WEBSITES_ENABLE_APP_SERVICE_STORAGE "true"
#                       -FUNCTIONS_EXTENSION_VERSION "4"
#                       -FUNCTIONS_WORKER_RUNTIME "dotnet-isolated"